name: CI/CD pipeline
on:
  push:
    branches: [main]

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: public.ecr.aws/t1m1t5z8/
  ECR_REPOSITORY_POI_API: gromits-api
  ECR_REPOSITORY_WEB_APP: gromits-webapp
  ECS_SERVICE: gromits-service
  ECS_CLUSTER: gromits
  ECS_TASK_DEFINITION: .aws/task-definition.json
  WEB_APP_CONTAINER_NAME: gromits-webapp
  POI_API_CONTAINER_NAME: gromits-api

defaults:
  run:
    shell: bash

jobs:
  build_service:
    name: Build the Service image and push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Public ECR
        uses: docker/login-action@v1
        id: login-ecr
        with:
          registry: ${{ ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --target prod -t $ECR_REGISTRY/$ECR_REPOSITORY_POI_API:$IMAGE_TAG ./buildings_service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_POI_API:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_POI_API:$IMAGE_TAG"

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env. POI_API_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

  build_webapp:
    name: Build the Webapp image and push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Public ECR
        uses: docker/login-action@v1
        id: login-ecr
        with:
          registry: ${{ ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --target prod -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG ./buildings_service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG"

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.POI_API_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    needs: [build_service, build_webapp]

    steps:
      - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
